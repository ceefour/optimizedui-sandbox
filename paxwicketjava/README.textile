h1. Optimzed UI Sandbox, using Pax Wicket web framework, in Java language

(There should be other web frameworks tested, and also in Scala)

Pax Wicket is first because it natively supports OSGi.

h2. Folder Structure

* core/ (com.hendyirawan.oui.paxwicketjava.core)
  Core bundle, contains the API and data model
* karaf/ Karaf 2.2.8 runtime, can be launched from command line, then attached
  in Eclipse for debugging. can run GoGo commands directly.
* web/ (com.hendyirawan.oui.paxwicketjava.web)
  the actual Web UI bundle.

h2. Karaf Crash Course

To view logs, you can tail -F data/log/*.log

To connect via SSH,

bc. ssh karaf@localhost -p8101

with password: karaf

To list features (available or install), use @feature:list@

To install a feature, use @feature:install -v@

Karaf Web Console is good for administration

bc. feature:install -v webconsole

Access from http://localhost:8181/system/console/bundles with user karaf password karaf


h2. Preparing the "App Server"

1. Unpack karaf 2.2.8 to karaf/
2. Install the web feature:

bc. feature:install -v http

(this will take some time, downloading stuff... and no output at all)

Karaf HTTP/Jetty will be accessible on http://localhost:8181/

3. Install WAR & WAB support so you can have static content and even JSP

feature:install -v war

Test it by using a sample simple WAR:
osgi:install -s webbundle:http://tomcat.apache.org/tomcat-5.5-doc/appdev/sample/sample.war?Bundle-SymbolicName=tomcat-sample&Web-ContextPath=/samples

Open via browser: 
http://localhost:8181/sample/index.html

4. Install pax-wicket (examples if you need)

bc. features:addurl mvn:org.ops4j.pax.wicket/features/1.0.1/xml/features
features:addurl mvn:org.ops4j.pax.wicket.samples/features/1.0.1/xml/features

bc. feature:install -v wicket

You need cglib, the samples will install it but wicket feature doesn't:

osgi:install mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.cglib/2.2.2_1

If you want samples too:

feature:install -v wicket-samples-blueprint-simple
feature:install -v wicket-samples-blueprint-wicketproperties
feature:install -v wicket-samples-blueprint-mount
feature:install -v wicket-samples-blueprint-filter
feature:install -v wicket-samples-blueprint-injection-simple

5. Install some more bunches of common libraries

bc. osgi:install mvn:com.google.guava/guava/12.0
osgi:install mvn:com.fasterxml.jackson.core/jackson-core/2.0.0
osgi:install mvn:com.fasterxml.jackson.core/jackson-databind/2.0.0
osgi:install mvn:com.fasterxml.jackson.core/jackson-annotations/2.0.0
osgi:install mvn:com.fasterxml.jackson.datatype/jackson-datatype-joda/2.0.0
osgi:install mvn:com.rabbitmq/amqp-client/2.8.2
osgi:install mvn:joda-time/joda-time/1.6.2

Note: Not needed, but maybe later...

bc. osgi:install mvn:joda-time/joda-time/2.1

6. Install Soluvas Framework libraries

bc. osgi:install mvn:org.soluvas/soluvas-commons/1.0.0-SNAPSHOT@snapshot
osgi:install mvn:org.soluvas/soluvas-json/1.0.0-SNAPSHOT@snapshot
osgi:install mvn:org.soluvas/soluvas-push/1.0.0-SNAPSHOT@snapshot

7. Karaf Web Console is good for administration

bc. feature:install -v webconsole

Access from http://localhost:8181/system/console/bundles with user karaf password karaf

8. Now you have a personalized application server. Better zip the karaf directory
   and store it somewhere for reuse.


h2. Deploying Bundles for Rapid Development

Do @mvn install@ for each project.

Then do a symlink:

bc. cd karaf/deploy
ln -sv ../../shell/target/com.hendyirawan.oui.paxwicketjava.shell-1.0.0-SNAPSHOT.jar
ln -sv ../../core/target/com.hendyirawan.oui.paxwicketjava.core-1.0.0-SNAPSHOT.jar

For make, the following symlink structure:

bc. 
ceefour@annafi:~/git/optimizedui-sandbox/paxwicketjava/karaf/deploy/com.hendyirawan.oui.paxwicketjava.web$ tree
.
├── bootstrap -> /home/ceefour/git/optimizedui-sandbox/paxwicketjava/web/src/main/webapp/bootstrap
├── jquery-notify -> /home/ceefour/git/optimizedui-sandbox/paxwicketjava/web/src/main/webapp/jquery-notify
├── jquery-ui -> /home/ceefour/git/optimizedui-sandbox/paxwicketjava/web/src/main/webapp/jquery-ui
├── js -> /home/ceefour/git/optimizedui-sandbox/paxwicketjava/web/src/main/webapp/js
├── META-INF -> /home/ceefour/git/optimizedui-sandbox/paxwicketjava/web/target/classes/META-INF
├── OSGI-INF -> /home/ceefour/git/optimizedui-sandbox/paxwicketjava/web/src/main/webapp/OSGI-INF
└── WEB-INF
    ├── classes -> /home/ceefour/git/optimizedui-sandbox/paxwicketjava/web/target/classes
    └── web.xml

8 directories, 1 file

Now access it from http://localhost:8181/oui/

Static assets should also be accessible:

bc. web:list

Should show Deployed on /static . Try:

http://localhost:8181/static/js/backbone.js


h2. Deploying Bundles for Pseudo-Development

Do @mvn install@ for each project.

Then do a symlink:

bc. cd karaf/deploy
ln -sv ../../shell/target/com.hendyirawan.oui.paxwicketjava.shell-1.0.0-SNAPSHOT.jar
ln -sv ../../core/target/com.hendyirawan.oui.paxwicketjava.core-1.0.0-SNAPSHOT.jar
ln -sv ../../web/target/com.hendyirawan.oui.paxwicketjava.web-1.0.0-SNAPSHOT.jar

Now access it from http://localhost:8181/oui/

Static assets should also be accessible:

bc. web:list

Should show Deployed on /static . Try:

http://localhost:8181/static/js/backbone.js


h2. Java vs Scala?

Why Scala? Because Scala has sbt, it can do continuous package
and Karaf will auto-redeploy.

In Java, we've got four choices:
1. Use sbt (huh?)
2. Use gradle (really? it does that?)
3. Use Eclipse, and some funky symlinks (creating symlinks can be scripted)
4. Run "mvn package" from Eclipse. Not cool, but "Full Publish" was much worse.
